name: workflow

on:
  push:
    branches: [ main, master, ajout-firebase ]

permissions:
  contents: write   # Créer la Release 

env:
  DOTNET_VERSION: '8.0.x'
  CONFIGURATION: Release
  IMAGE_NAME: ${{ secrets.DOCKERHUB_USERNAME }}/api-elasticsearch

jobs:
  restore_build:
    name: Restore & Build
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - name: Setup .NET
        uses: actions/setup-dotnet@v4
        with:
          dotnet-version: ${{ env.DOTNET_VERSION }}
      - name: Restore
        run: dotnet restore ApiElasticSearch.sln
      - name: Build
        run: dotnet build ApiElasticSearch.sln -c ${{ env.CONFIGURATION }} --no-restore

  audit:
    name: Vulnerability scan
    runs-on: ubuntu-latest
    needs: restore_build
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-dotnet@v4
        with:
          dotnet-version: ${{ env.DOTNET_VERSION }}
      - name: List vulnerable packages
        run: |
          dotnet list ApiElasticSearch.sln package --vulnerable || true
          # échoue si "critical" trouvé
          dotnet list ApiElasticSearch.sln package --vulnerable | grep -qi "critical" && exit 1 || echo "No critical vulns"

  publish_api:
    name: Publish API (zip)
    runs-on: ubuntu-latest
    needs: audit
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-dotnet@v4
        with:
          dotnet-version: ${{ env.DOTNET_VERSION }}
      - name: Create Firebase credentials file
        run: |
          cat > ApiElasticSearch/.ledico-d498c-firebase-adminsdk-fbsvc-eef0abcf49.json << 'EOF'
          ${{ secrets.FIREBASE_JSON }}
          EOF
      - name: Publish (framework-dependent)
        run: dotnet publish ApiElasticSearch/ApiElasticSearch.csproj -c ${{ env.CONFIGURATION }} -o publish
      - name: Pack artifact
        run: |
          mkdir -p artifacts
          (cd publish && zip -r ../artifacts/ApiElasticSearch-${{ github.sha }}.zip .)
      - name: Upload artifact
        uses: actions/upload-artifact@v4
        with:
          name: api-publish
          path: artifacts/*.zip
          if-no-files-found: error

  docker:
    name: Build & Push Docker image
    runs-on: ubuntu-latest
    needs: publish_api
    steps:
      - uses: actions/checkout@v4

      - name: Create Firebase credentials file
        run: |
          cat > ApiElasticSearch/.ledico-d498c-firebase-adminsdk-fbsvc-eef0abcf49.json << 'EOF'
          ${{ secrets.FIREBASE_JSON }}
          EOF

      - name: Sanity check – creds file is here
        run: |
          ls -l ApiElasticSearch | sed -n '1,120p'
          test -s "ApiElasticSearch/.ledico-d498c-firebase-adminsdk-fbsvc-eef0abcf49.json" || (echo "Missing creds file" && exit 1)

      - name: Login to DockerHub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      - name: Build & Push
        uses: docker/build-push-action@v6
        with:
          context: ./ApiElasticSearch
          file: ./ApiElasticSearch/Dockerfile
          push: true
          tags: |
            ${{ env.IMAGE_NAME }}:latest
            ${{ env.IMAGE_NAME }}:sha-${{ github.sha }}

  release_latest:
    name: Release "latest"
    runs-on: ubuntu-latest
    needs: docker
    if: github.event_name == 'push'   # pas sur PR
    steps:
      - uses: actions/download-artifact@v4
        with:
          name: api-publish
          path: .
      - name: Reset 'latest' release & tag
        run: |
          gh release delete latest -y || true
          git tag -d latest || true
          git push origin :refs/tags/latest || true
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      - name: Create new 'latest' release with artifact
        uses: softprops/action-gh-release@v2
        with:
          tag_name: latest
          name: "Latest Backend Build"
          body: "Build automatique depuis ${{ github.ref }} @ ${{ github.sha }}"
          files: "*.zip"
          draft: false
          prerelease: false
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}